# Generated by Django 5.1.7 on 2025-04-07 14:08

import api.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('sexe', models.CharField(blank=True, choices=[('homme', 'Homme'), ('femme', 'Femme')], max_length=50, null=True)),
                ('telephone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Format: +2250123456789', regex='^\\+?[0-9]{8,15}$')])),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='MyModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('utilisateur_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('matricule', models.CharField(max_length=100, unique=True, verbose_name='Matricule')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='agents/photos/')),
                ('poste', models.CharField(blank=True, max_length=100, null=True)),
                ('role', models.CharField(choices=[('admin', 'Administrateur'), ('agent', 'Agent')], default='agent', max_length=20)),
                ('status', models.CharField(choices=[('actif', 'Actif'), ('inactif', 'Inactif')], default='actif', max_length=20, verbose_name='Statut')),
            ],
            options={
                'verbose_name': 'Agent',
                'verbose_name_plural': 'Agents',
            },
            bases=('api.utilisateur',),
        ),
        migrations.CreateModel(
            name='Commune',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, verbose_name='Nom')),
                ('type', models.CharField(blank=True, choices=[('mairie', 'Mairie'), ('sous-prefecture', 'Sous-Préfecture')], max_length=50, verbose_name='Type de commune')),
                ('region', models.CharField(max_length=100, verbose_name='Région')),
                ('adresse_postale', models.CharField(blank=True, max_length=200, null=True, verbose_name='Adresse postale')),
                ('signature', models.CharField(blank=True, max_length=200, null=True, verbose_name='Signature officielle')),
                ('telephone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit être au format international (ex: +2250123456789).', regex='^\\+?[0-9]{8,15}$')], verbose_name='Téléphone')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Adresse email')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_modification', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
            ],
            options={
                'verbose_name': 'Commune',
                'verbose_name_plural': 'Communes',
                'ordering': ['region', 'nom'],
                'constraints': [models.UniqueConstraint(fields=('nom', 'region'), name='commune_unique')],
            },
        ),
        migrations.CreateModel(
            name='Demande',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_demande', models.CharField(default=api.models.generate_demande_number, max_length=50, unique=True, verbose_name='Numéro de demande')),
                ('numero_acte', models.CharField(blank=True, max_length=50, null=True, verbose_name="Numéro d'acte")),
                ('date_etablissement', models.DateField(verbose_name="Date d'établissement")),
                ('quantite', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantité')),
                ('statut', models.CharField(choices=[('en_attente', 'En attente'), ('en_cours', 'En cours'), ('rejete', 'Rejeté'), ('echec', 'Échec'), ('succes', 'Succès')], default='en_attente', max_length=20, verbose_name='Statut de la demande')),
                ('commentaires', models.TextField(blank=True, null=True, verbose_name='Commentaires')),
                ('date_demande', models.DateTimeField(auto_now_add=True, verbose_name="Date d'envoi de la demande")),
                ('date_modification', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('commune_cible', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demandes_cible', to='api.commune', verbose_name='Commune cible')),
                ('commune_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demandes_source', to='api.commune', verbose_name='Commune source')),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demandes', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur demandeur')),
                ('agent_en_charge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='demandes_en_charge', to='api.agent', verbose_name='Agent en charge')),
            ],
            options={
                'verbose_name': 'Demande',
                'verbose_name_plural': 'Demandes',
                'ordering': ['-date_demande'],
            },
        ),
        migrations.CreateModel(
            name='Rejet',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('motif', models.TextField(verbose_name='Motif du rejet')),
                ('procedure_recours', models.TextField(blank=True, null=True, verbose_name='Procédure de recours')),
                ('date_rejet', models.DateTimeField(auto_now_add=True, verbose_name='Date du rejet')),
                ('delais_recours', models.DateTimeField(default=api.models.get_default_delais_recours, verbose_name='Délai de recours')),
                ('demande', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rejet', to='api.demande', verbose_name='Demande rejetée')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rejets', to='api.agent', verbose_name='Agent ayant rejeté')),
            ],
            options={
                'verbose_name': 'Rejet',
                'verbose_name_plural': 'Rejets',
                'ordering': ['-date_rejet'],
            },
        ),
        migrations.AddField(
            model_name='agent',
            name='commune_service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agents_service', to='api.commune'),
        ),
        migrations.CreateModel(
            name='Journal',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('date_action', models.DateTimeField(auto_now_add=True, verbose_name="Date de l'action")),
                ('type_action', models.CharField(choices=[('creation', 'Création'), ('modification', 'Modification'), ('suppression', 'Suppression'), ('consultation', 'Consultation'), ('validation', 'Validation'), ('rejet', 'Rejet'), ('paiement', 'Paiement'), ('connexion', 'Connexion'), ('deconnexion', 'Déconnexion')], max_length=50, verbose_name="Type d'action")),
                ('description', models.TextField(verbose_name='Description')),
                ('adresse_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Adresse IP')),
                ('demande', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='journal', to='api.demande', verbose_name='Demande concernée')),
                ('utilisateur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='journals_utilisateur', related_query_name='journal_utilisateur', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Journal',
                'verbose_name_plural': 'Journal des actions',
                'ordering': ['-date_action'],
                'indexes': [models.Index(fields=['date_action'], name='api_journal_date_ac_9a82e9_idx'), models.Index(fields=['type_action'], name='api_journal_type_ac_d3ba22_idx')],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=200, verbose_name='Titre')),
                ('message', models.TextField(verbose_name='Message')),
                ('type_notification', models.CharField(choices=[('info', 'Information'), ('succes', 'Succès'), ('erreur', 'Erreur')], default='info', max_length=50, verbose_name='Type de notification')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('est_lu', models.BooleanField(default=False, verbose_name='Est lu')),
                ('date_lecture', models.DateTimeField(blank=True, null=True, verbose_name='Date de lecture')),
                ('demande', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications', to='api.demande', verbose_name='Demande concernée')),
                ('utilisateur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications_utilisateur', related_query_name='notification_utilisateur', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-date_creation'],
                'indexes': [models.Index(fields=['est_lu'], name='api_notific_est_lu_864039_idx'), models.Index(fields=['date_creation'], name='api_notific_date_cr_8e6cfb_idx')],
            },
        ),
        migrations.CreateModel(
            name='Paiement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(default=api.models.generate_payment_reference, max_length=50, unique=True, verbose_name='Référence de paiement')),
                ('montant', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant')),
                ('methode', models.CharField(choices=[('tresor_money', 'Tresor money'), ('mtn_money', 'MTN Money'), ('orange_money', 'Orange Money'), ('moov_money', 'Moov Money'), ('wave', 'Wave')], max_length=50, verbose_name='Méthode de paiement')),
                ('telephone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit être au format international (ex: +2250123456789).', regex='^\\+?[0-9]{8,15}$')], verbose_name='Téléphone')),
                ('id_transaction', models.CharField(blank=True, max_length=100, null=True, verbose_name='ID de transaction')),
                ('statut', models.CharField(choices=[('en_attente', 'En attente'), ('paye', 'Payé'), ('annule', 'Annulé'), ('rembourse', 'Remboursé')], default='en_attente', max_length=20, verbose_name='Statut du paiement')),
                ('date_paiement', models.DateTimeField(auto_now_add=True, verbose_name='Date initiale du paiement')),
                ('demande', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='paiement', to='api.demande', verbose_name='Demande associée')),
            ],
            options={
                'verbose_name': 'Paiement',
                'verbose_name_plural': 'Paiements',
                'ordering': ['-date_paiement'],
                'indexes': [models.Index(fields=['statut'], name='api_paiemen_statut_c2db2d_idx'), models.Index(fields=['date_paiement'], name='api_paiemen_date_pa_428a1f_idx')],
            },
        ),
        migrations.CreateModel(
            name='Enregistrement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_acte', models.CharField(max_length=50, verbose_name="Numéro d'acte")),
                ('date_acte', models.DateField(verbose_name="Année de l'acte")),
                ('date_enregistrement', models.DateField(verbose_name="Année de l'enregistrement")),
                ('nom_enfant', models.CharField(max_length=100, verbose_name="Nom de l'enfant")),
                ('prenoms_enfant', models.CharField(max_length=200, verbose_name="Prénom(s) de l'enfant")),
                ('date_naissance', models.DateField(verbose_name='Date de naissance')),
                ('heure_naissance', models.TimeField(blank=True, null=True, verbose_name='Heure de naissance')),
                ('lieu_naissance', models.CharField(max_length=200, verbose_name='Lieu de naissance')),
                ('sexe', models.CharField(blank=True, max_length=10, null=True, verbose_name='Sexe')),
                ('nom_pere', models.CharField(max_length=100, verbose_name='Nom du père')),
                ('prenoms_pere', models.CharField(max_length=200, verbose_name='Prénom(s) du père')),
                ('nationalite_pere', models.CharField(max_length=100, verbose_name='Nationalité du père')),
                ('profession_pere', models.CharField(max_length=100, verbose_name='Profession du père')),
                ('domicile_pere', models.CharField(max_length=200, verbose_name='Domicile du père')),
                ('nom_mere', models.CharField(max_length=100, verbose_name='Nom de la mère')),
                ('prenoms_mere', models.CharField(max_length=200, verbose_name='Prénom(s) de la mère')),
                ('nationalite_mere', models.CharField(max_length=100, verbose_name='Nationalité de la mère')),
                ('profession_mere', models.CharField(max_length=100, verbose_name='Profession de la mère')),
                ('domicile_mere', models.CharField(max_length=200, verbose_name='Domicile de la mère')),
                ('mentions_marginales', models.TextField(blank=True, null=True, verbose_name='Mentions marginales')),
                ('date_delivrance', models.DateField(verbose_name='Date de délivrance')),
                ('lieu_delivrance', models.CharField(max_length=200, verbose_name='Lieu de délivrance')),
                ('nom_officier_etat_civil', models.CharField(max_length=200, verbose_name="Nom de l'officier d'état civil")),
                ('signature_officier', models.CharField(blank=True, max_length=200, null=True, verbose_name="Signature de l'officier")),
                ('fonction_officier', models.CharField(blank=True, max_length=200, null=True, verbose_name="Fonction de l'officier")),
                ('sceau_officiel', models.CharField(blank=True, max_length=200, null=True, verbose_name='Sceau officiel')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_modification', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='enregistrements', to='api.agent', verbose_name='Agent traitant')),
            ],
            options={
                'verbose_name': 'Enregistrement',
                'verbose_name_plural': 'Enregistrements',
                'ordering': ['-date_enregistrement'],
                'indexes': [models.Index(fields=['numero_acte'], name='api_enregis_numero__b6aae7_idx'), models.Index(fields=['nom_enfant', 'prenoms_enfant'], name='api_enregis_nom_enf_361f84_idx'), models.Index(fields=['date_naissance'], name='api_enregis_date_na_d59b0b_idx')],
                'constraints': [models.UniqueConstraint(fields=('numero_acte', 'date_acte'), name='acte_unique')],
            },
        ),
        migrations.AddIndex(
            model_name='demande',
            index=models.Index(fields=['utilisateur'], name='api_demande_utilisa_afdf83_idx'),
        ),
        migrations.AddIndex(
            model_name='demande',
            index=models.Index(fields=['statut'], name='api_demande_statut_1f6a26_idx'),
        ),
        migrations.AddIndex(
            model_name='demande',
            index=models.Index(fields=['date_demande'], name='api_demande_date_de_e4db6f_idx'),
        ),
    ]
